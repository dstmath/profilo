// -*- C++ -*-
//===----------------------------- new ------------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _MUSEUM_LIBCPP_NEW
#define _MUSEUM_LIBCPP_NEW

/*
    new synopsis

namespace std
{

class bad_alloc
    : public exception
{
public:
    bad_alloc() noexcept;
    bad_alloc(const bad_alloc&) noexcept;
    bad_alloc& operator=(const bad_alloc&) noexcept;
    virtual const char* what() const noexcept;
};

class bad_array_length : public bad_alloc // C++14
{
public:
    bad_array_length() noexcept;
};

class bad_array_new_length : public bad_alloc
{
public:
    bad_array_new_length() noexcept;
};

struct nothrow_t {};
extern const nothrow_t nothrow;
typedef void (*new_handler)();
new_handler set_new_handler(new_handler new_p) noexcept;
new_handler get_new_handler() noexcept;

}  // std

void* operator new(facebook::museum::MUSEUM_VERSION::std::size_t size);                                   // replaceable
void* operator new(facebook::museum::MUSEUM_VERSION::std::size_t size, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) noexcept;   // replaceable
void  operator delete(void* ptr) noexcept;                              // replaceable
void  operator delete(void* ptr, facebook::museum::MUSEUM_VERSION::std::size_t size) noexcept;            // replaceable, C++14
void  operator delete(void* ptr, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) noexcept;       // replaceable

void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t size);                                 // replaceable
void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t size, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) noexcept; // replaceable
void  operator delete[](void* ptr) noexcept;                            // replaceable
void  operator delete[](void* ptr, facebook::museum::MUSEUM_VERSION::std::size_t size) noexcept;          // replaceable, C++14
void  operator delete[](void* ptr, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) noexcept;     // replaceable

void* operator new  (facebook::museum::MUSEUM_VERSION::std::size_t size, void* ptr) noexcept;
void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t size, void* ptr) noexcept;
void  operator delete  (void* ptr, void*) noexcept;
void  operator delete[](void* ptr, void*) noexcept;

*/

#include <museum/7.1.2/external/libcxx/__config>
#include <museum/7.1.2/external/libcxx/exception>
#include <museum/7.1.2/external/libcxx/cstddef>

#include <museum/7.1.2/external/libcxx/__undef___deallocate>

#if !defined(_MUSEUM_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

namespace facebook { namespace museum { namespace MUSEUM_VERSION { namespace std  // purposefully not using versioning namespace
{

class _MUSEUM_LIBCPP_EXCEPTION_ABI bad_alloc
    : public exception
{
public:
    bad_alloc() _NOEXCEPT;
    virtual ~bad_alloc() _NOEXCEPT;
    virtual const char* what() const _NOEXCEPT;
};

class _MUSEUM_LIBCPP_EXCEPTION_ABI bad_array_new_length
    : public bad_alloc
{
public:
    bad_array_new_length() _NOEXCEPT;
    virtual ~bad_array_new_length() _NOEXCEPT;
    virtual const char* what() const _NOEXCEPT;
};

#if defined(_MUSEUM_LIBCPP_BUILDING_NEW) || (_MUSEUM_LIBCPP_STD_VER > 11)

class _MUSEUM_LIBCPP_EXCEPTION_ABI bad_array_length
    : public bad_alloc
{
public:
    bad_array_length() _NOEXCEPT;
    virtual ~bad_array_length() _NOEXCEPT;
    virtual const char* what() const _NOEXCEPT;
};

#define _MUSEUM_LIBCPP_BAD_ARRAY_LENGTH_DEFINED

#endif  // defined(_MUSEUM_LIBCPP_BUILDING_NEW) || (_MUSEUM_LIBCPP_STD_VER > 11)

_MUSEUM_LIBCPP_FUNC_VIS void __throw_bad_alloc();  // not in C++ spec

struct _MUSEUM_LIBCPP_TYPE_VIS nothrow_t {};
extern _MUSEUM_LIBCPP_FUNC_VIS const nothrow_t nothrow;
typedef void (*new_handler)();
_MUSEUM_LIBCPP_FUNC_VIS new_handler set_new_handler(new_handler) _NOEXCEPT;
_MUSEUM_LIBCPP_FUNC_VIS new_handler get_new_handler() _NOEXCEPT;

} } } }  // facebook::museum::MUSEUM_VERSION::std

#if defined(_WIN32) && !defined(cxx_EXPORTS)
# define _MUSEUM_LIBCPP_NEW_DELETE_VIS _MUSEUM_LIBCPP_FUNC_VIS_ONLY
#else
# define _MUSEUM_LIBCPP_NEW_DELETE_VIS _MUSEUM_LIBCPP_FUNC_VIS
#endif

_MUSEUM_LIBCPP_NEW_DELETE_VIS void* operator new(facebook::museum::MUSEUM_VERSION::std::size_t __sz)
#if !__has_feature(cxx_noexcept)
    throw(facebook::museum::MUSEUM_VERSION::std::bad_alloc)
#endif
;
_MUSEUM_LIBCPP_NEW_DELETE_VIS void* operator new(facebook::museum::MUSEUM_VERSION::std::size_t __sz, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) _NOEXCEPT _NOALIAS;
_MUSEUM_LIBCPP_NEW_DELETE_VIS void  operator delete(void* __p) _NOEXCEPT;
_MUSEUM_LIBCPP_NEW_DELETE_VIS void  operator delete(void* __p, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) _NOEXCEPT;
#if defined(_MUSEUM_LIBCPP_BUILDING_NEW) || _MUSEUM_LIBCPP_STD_VER >= 14 || \
    (defined(__cpp_sized_deallocation) && __cpp_sized_deallocation >= 201309)
_MUSEUM_LIBCPP_NEW_DELETE_VIS void  operator delete(void* __p, facebook::museum::MUSEUM_VERSION::std::size_t __sz) _NOEXCEPT;
#endif

_MUSEUM_LIBCPP_NEW_DELETE_VIS void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t __sz)
#if !__has_feature(cxx_noexcept)
    throw(facebook::museum::MUSEUM_VERSION::std::bad_alloc)
#endif
;
_MUSEUM_LIBCPP_NEW_DELETE_VIS void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t __sz, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) _NOEXCEPT _NOALIAS;
_MUSEUM_LIBCPP_NEW_DELETE_VIS void  operator delete[](void* __p) _NOEXCEPT;
_MUSEUM_LIBCPP_NEW_DELETE_VIS void  operator delete[](void* __p, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) _NOEXCEPT;
#if defined(_MUSEUM_LIBCPP_BUILDING_NEW) || _MUSEUM_LIBCPP_STD_VER >= 14 || \
    (defined(__cpp_sized_deallocation) && __cpp_sized_deallocation >= 201309)
_MUSEUM_LIBCPP_NEW_DELETE_VIS void  operator delete[](void* __p, facebook::museum::MUSEUM_VERSION::std::size_t __sz) _NOEXCEPT;
#endif

inline _MUSEUM_LIBCPP_INLINE_VISIBILITY void* operator new  (facebook::museum::MUSEUM_VERSION::std::size_t, void* __p) _NOEXCEPT;
inline _MUSEUM_LIBCPP_INLINE_VISIBILITY void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t, void* __p) _NOEXCEPT;
inline _MUSEUM_LIBCPP_INLINE_VISIBILITY void  operator delete  (void*, void*) _NOEXCEPT;
inline _MUSEUM_LIBCPP_INLINE_VISIBILITY void  operator delete[](void*, void*) _NOEXCEPT;

_MUSEUM_LIBCPP_BEGIN_NAMESPACE_STD

inline _MUSEUM_LIBCPP_INLINE_VISIBILITY void *__allocate(size_t __size) {
#ifdef _MUSEUM_LIBCPP_HAS_NO_BUILTIN_OPERATOR_NEW_DELETE
  return ::operator new(__size);
#else
  return __builtin_operator_new(__size);
#endif
}

inline _MUSEUM_LIBCPP_INLINE_VISIBILITY void __deallocate(void *__ptr) {
#ifdef _MUSEUM_LIBCPP_HAS_NO_BUILTIN_OPERATOR_NEW_DELETE
  ::operator delete(__ptr);
#else
  __builtin_operator_delete(__ptr);
#endif
}

_MUSEUM_LIBCPP_END_NAMESPACE_STD

#endif  // _MUSEUM_LIBCPP_NEW
