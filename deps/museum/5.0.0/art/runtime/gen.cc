// Copyright 2004-present Facebook. All Rights Reserved.
// Generated by: //native/museum/run_codegen.sh
// This is generated code -- do not modify manually.

// @generated SignedSource<<b2603417a55d72346d66cc67c1eb4f9f>>
// @model md5 de1e7c29e8c6917743cb0921f412da0e


#include <museum/5.0.0/art/runtime/base/logging.h>
#include <museum/5.0.0/art/runtime/mirror/array.h>
#include <museum/5.0.0/art/runtime/mirror/art_method.h>
#include <museum/5.0.0/art/runtime/runtime.h>
#include <museum/5.0.0/art/runtime/thread.h>
#include <museum/5.0.0/art/runtime/thread_list.h>
#include <museum/5.0.0/art/runtime/utils.h>
#include <new>

#include <museum/libs.h>

namespace facebook { namespace museum { namespace MUSEUM_VERSION {



namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art6mirror5Array35ThrowArrayIndexOutOfBoundsExceptionEi() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art6mirror5Array35ThrowArrayIndexOutOfBoundsExceptionEi",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { namespace mirror { 

  
  void Array::ThrowArrayIndexOutOfBoundsException(int p1)   {
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6mirror5Array35ThrowArrayIndexOutOfBoundsExceptionEi
      <void
        (Array *, int)>()
      (this, p1);
    
  }
} } // namespace art::mirror::



namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art6mirror9ArtMethod13IsProxyMethodEv() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art6mirror9ArtMethod13IsProxyMethodEv",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { namespace mirror { 

  
  bool ArtMethod::IsProxyMethod()   {
    return
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6mirror9ArtMethod13IsProxyMethodEv
      <bool
        (ArtMethod *)>()
      (this);
    
  }
} } // namespace art::mirror::



namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art17ConditionVariable4WaitEPNS_6ThreadE() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art17ConditionVariable4WaitEPNS_6ThreadE",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  void ConditionVariable::Wait(Thread* p1)   {
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art17ConditionVariable4WaitEPNS_6ThreadE
      <void
        (ConditionVariable *, Thread*)>()
      (this, p1);
    
  }
} // namespace art::


namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art17ConditionVariable16WaitHoldingLocksEPNS_6ThreadE() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art17ConditionVariable16WaitHoldingLocksEPNS_6ThreadE",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  void ConditionVariable::WaitHoldingLocks(Thread* p1)   {
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art17ConditionVariable16WaitHoldingLocksEPNS_6ThreadE
      <void
        (ConditionVariable *, Thread*)>()
      (this, p1);
    
  }
} // namespace art::



namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art5Locks13mutator_lock_E() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art5Locks13mutator_lock_E",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 
#ifdef mutator_lock_
  #undef mutator_lock_
#else
  #error "mutator_lock_ is not method-wrapped and will not be proxied correctly"
#endif
  
  ReaderWriterMutex*& Locks::mutator_lock_()   {
    return *
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art5Locks13mutator_lock_E
      <ReaderWriterMutex*
        >()
      ;
    
  }
} // namespace art::


namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art5Locks26thread_suspend_count_lock_E() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art5Locks26thread_suspend_count_lock_E",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 
#ifdef thread_suspend_count_lock_
  #undef thread_suspend_count_lock_
#else
  #error "thread_suspend_count_lock_ is not method-wrapped and will not be proxied correctly"
#endif
  
  Mutex*& Locks::thread_suspend_count_lock_()   {
    return *
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art5Locks26thread_suspend_count_lock_E
      <Mutex*
        >()
      ;
    
  }
} // namespace art::



namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art10LogMessageD1Ev() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art10LogMessageD1Ev",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
   LogMessage::~LogMessage()   {
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art10LogMessageD1Ev
      <void
        (LogMessage *)>()
      (this);
    
  }
} // namespace art::



namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art14LogMessageDataC1EPKciii() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art14LogMessageDataC1EPKciii",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
   LogMessageData::LogMessageData(char const* p1, int p2, LogSeverity p3, int p4)   {
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art14LogMessageDataC1EPKciii
      <void
        (LogMessageData *, char const*, int, LogSeverity, int)>()
      (this, p1, p2, p3, p4);
    
  }
} // namespace art::



namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art5Mutex13ExclusiveLockEPNS_6ThreadE() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art5Mutex13ExclusiveLockEPNS_6ThreadE",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  void Mutex::ExclusiveLock(Thread* p1)   {
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art5Mutex13ExclusiveLockEPNS_6ThreadE
      <void
        (Mutex *, Thread*)>()
      (this, p1);
    
  }
} // namespace art::


namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art5Mutex15ExclusiveUnlockEPNS_6ThreadE() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art5Mutex15ExclusiveUnlockEPNS_6ThreadE",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  void Mutex::ExclusiveUnlock(Thread* p1)   {
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art5Mutex15ExclusiveUnlockEPNS_6ThreadE
      <void
        (Mutex *, Thread*)>()
      (this, p1);
    
  }
} // namespace art::



namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art7Runtime14IsShuttingDownEPNS_6ThreadE() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art7Runtime14IsShuttingDownEPNS_6ThreadE",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  bool Runtime::IsShuttingDown(Thread* p1)   {
    return
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art7Runtime14IsShuttingDownEPNS_6ThreadE
      <bool
        (Runtime *, Thread*)>()
      (this, p1);
    
  }
} // namespace art::


namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art7Runtime9instance_E() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art7Runtime9instance_E",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  Runtime*& Runtime::instance_()   {
    return *
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art7Runtime9instance_E
      <Runtime*
        >()
      ;
    
  }
} // namespace art::



namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZNK3art6Thread13DecodeJObjectEP8_jobject() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZNK3art6Thread13DecodeJObjectEP8_jobject",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  mirror::Object* Thread::DecodeJObject(jobject p1) const  {
    return
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZNK3art6Thread13DecodeJObjectEP8_jobject
      <mirror::Object*
        (Thread const*, jobject)>()
      (this, p1);
    
  }
} // namespace art::


namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art6Thread21RunCheckpointFunctionEv() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art6Thread21RunCheckpointFunctionEv",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  void Thread::RunCheckpointFunction()   {
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6Thread21RunCheckpointFunctionEv
      <void
        (Thread *)>()
      (this);
    
  }
} // namespace art::


namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art6Thread11is_started_E() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art6Thread11is_started_E",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 
#ifdef is_started_
  #undef is_started_
#else
  #error "is_started_ is not method-wrapped and will not be proxied correctly"
#endif
  
  bool& Thread::is_started_()   {
    return *
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6Thread11is_started_E
      <bool
        >()
      ;
    
  }
} // namespace art::


namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art6Thread17pthread_key_self_E() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art6Thread17pthread_key_self_E",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 
#ifdef pthread_key_self_
  #undef pthread_key_self_
#else
  #error "pthread_key_self_ is not method-wrapped and will not be proxied correctly"
#endif
  
  pthread_key_t& Thread::pthread_key_self_()   {
    return *
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6Thread17pthread_key_self_E
      <pthread_key_t
        >()
      ;
    
  }
} // namespace art::


namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art6Thread12resume_cond_E() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art6Thread12resume_cond_E",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 
#ifdef resume_cond_
  #undef resume_cond_
#else
  #error "resume_cond_ is not method-wrapped and will not be proxied correctly"
#endif
  
  ConditionVariable*& Thread::resume_cond_()   {
    return *
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6Thread12resume_cond_E
      <ConditionVariable*
        >()
      ;
    
  }
} // namespace art::



namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art10ThreadList9ResumeAllEv() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art10ThreadList9ResumeAllEv",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  void ThreadList::ResumeAll()   {
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art10ThreadList9ResumeAllEv
      <void
        (ThreadList *)>()
      (this);
    
  }
} // namespace art::


namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art10ThreadList10SuspendAllEv() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art10ThreadList10SuspendAllEv",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  void ThreadList::SuspendAll()   {
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art10ThreadList10SuspendAllEv
      <void
        (ThreadList *)>()
      (this);
    
  }
} // namespace art::


namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZNK3art10ThreadList10VisitRootsEPFvPPNS_6mirror6ObjectEPvjNS_8RootTypeEES5_() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZNK3art10ThreadList10VisitRootsEPFvPPNS_6mirror6ObjectEPvjNS_8RootTypeEES5_",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  void ThreadList::VisitRoots(RootCallback* p1, void* p2) const  {
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZNK3art10ThreadList10VisitRootsEPFvPPNS_6mirror6ObjectEPvjNS_8RootTypeEES5_
      <void
        (ThreadList const*, RootCallback*, void*)>()
      (this, p1, p2);
    
  }
} // namespace art::



namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3art6GetTidEv() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3art6GetTidEv",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  pid_t GetTid()   {
    return
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6GetTidEv
      <pid_t
        ()>()
      ();
    
  }
} // namespace art::


namespace libart { namespace lookups {
  template<typename T>
  T* lookup___ZN3artlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_11ThreadStateE() {
    static auto const symbol = ::facebook::libart().get_symbol<T>({
      "_ZN3artlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_11ThreadStateE",
    });
    return symbol;
  }
} } // namespace libart::lookups
namespace art { 

  
  std::ostream& operator<<(std::ostream& p1, ThreadState const& p2)   {
    return
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3artlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_11ThreadStateE
      <std::ostream&
        (std::ostream&, ThreadState const&)>()
      (p1, p2);
    
  }
} // namespace art::


namespace libart {
  void preinitSymbols() {
    using namespace ::facebook::museum::MUSEUM_VERSION::art::mirror;
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6mirror5Array35ThrowArrayIndexOutOfBoundsExceptionEi
        <void
          (Array *, int)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6mirror9ArtMethod13IsProxyMethodEv
        <bool
          (ArtMethod *)>();
    
    
    using namespace ::facebook::museum::MUSEUM_VERSION::art;
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art17ConditionVariable4WaitEPNS_6ThreadE
        <void
          (ConditionVariable *, Thread*)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art17ConditionVariable16WaitHoldingLocksEPNS_6ThreadE
        <void
          (ConditionVariable *, Thread*)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art5Locks13mutator_lock_E
        <ReaderWriterMutex*
          >();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art5Locks26thread_suspend_count_lock_E
        <Mutex*
          >();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art10LogMessageD1Ev
        <void
          (LogMessage *)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art14LogMessageDataC1EPKciii
        <void
          (LogMessageData *, char const*, int, LogSeverity, int)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art5Mutex13ExclusiveLockEPNS_6ThreadE
        <void
          (Mutex *, Thread*)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art5Mutex15ExclusiveUnlockEPNS_6ThreadE
        <void
          (Mutex *, Thread*)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art7Runtime14IsShuttingDownEPNS_6ThreadE
        <bool
          (Runtime *, Thread*)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art7Runtime9instance_E
        <Runtime*
          >();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZNK3art6Thread13DecodeJObjectEP8_jobject
        <mirror::Object*
          (Thread const*, jobject)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6Thread21RunCheckpointFunctionEv
        <void
          (Thread *)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6Thread11is_started_E
        <bool
          >();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6Thread17pthread_key_self_E
        <pthread_key_t
          >();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6Thread12resume_cond_E
        <ConditionVariable*
          >();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art10ThreadList9ResumeAllEv
        <void
          (ThreadList *)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art10ThreadList10SuspendAllEv
        <void
          (ThreadList *)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZNK3art10ThreadList10VisitRootsEPFvPPNS_6mirror6ObjectEPvjNS_8RootTypeEES5_
        <void
          (ThreadList const*, RootCallback*, void*)>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3art6GetTidEv
        <pid_t
          ()>();
    
    
    
      ::facebook::museum::MUSEUM_VERSION::libart::lookups::lookup___ZN3artlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_11ThreadStateE
        <std::ostream&
          (std::ostream&, ThreadState const&)>();
    
    
  }
} // namespace libart

} } } // namespace facebook::museum::MUSEUM_VERSION
