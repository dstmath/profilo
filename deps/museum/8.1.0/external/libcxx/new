// -*- C++ -*-
//===----------------------------- new ------------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _MUSEUM_LIBCPP_NEW
#define _MUSEUM_LIBCPP_NEW

/*
    new synopsis

namespace std
{

class bad_alloc
    : public exception
{
public:
    bad_alloc() noexcept;
    bad_alloc(const bad_alloc&) noexcept;
    bad_alloc& operator=(const bad_alloc&) noexcept;
    virtual const char* what() const noexcept;
};

class bad_array_length : public bad_alloc // FIXME: Not part of C++
{
public:
    bad_array_length() noexcept;
};

class bad_array_new_length : public bad_alloc // C++14
{
public:
    bad_array_new_length() noexcept;
};

enum class align_val_t : size_t {}; // C++17
struct nothrow_t {};
extern const nothrow_t nothrow;
typedef void (*new_handler)();
new_handler set_new_handler(new_handler new_p) noexcept;
new_handler get_new_handler() noexcept;

}  // std

void* operator new(facebook::museum::MUSEUM_VERSION::std::size_t size);                                   // replaceable
void* operator new(facebook::museum::MUSEUM_VERSION::std::size_t size, facebook::museum::MUSEUM_VERSION::std::align_val_t alignment);       // replaceable, C++17
void* operator new(facebook::museum::MUSEUM_VERSION::std::size_t size, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) noexcept;   // replaceable
void* operator new(facebook::museum::MUSEUM_VERSION::std::size_t size, facebook::museum::MUSEUM_VERSION::std::align_val_t alignment,
                   const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) noexcept;                     // replaceable, C++17
void  operator delete(void* ptr) noexcept;                              // replaceable
void  operator delete(void* ptr, facebook::museum::MUSEUM_VERSION::std::size_t size) noexcept;            // replaceable, C++14
void  operator delete(void* ptr, facebook::museum::MUSEUM_VERSION::std::align_val_t alignment) noexcept;  // replaceable, C++17
void  operator delete(void* ptr, facebook::museum::MUSEUM_VERSION::std::size_t size,
                      facebook::museum::MUSEUM_VERSION::std::align_val_t alignment) noexcept;             // replaceable, C++17
void  operator delete(void* ptr, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) noexcept;       // replaceable
void  operator delete(void* ptr, std:align_val_t alignment,
                      const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) noexcept;                  // replaceable, C++17

void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t size);                                 // replaceable
void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t size,
                     facebook::museum::MUSEUM_VERSION::std::align_val_t alignment) noexcept;              // replaceable, C++17
void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t size, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) noexcept; // replaceable
void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t size, facebook::museum::MUSEUM_VERSION::std::align_val_t alignment,
                     const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) noexcept;                   // replaceable, C++17
void  operator delete[](void* ptr) noexcept;                            // replaceable
void  operator delete[](void* ptr, facebook::museum::MUSEUM_VERSION::std::size_t size) noexcept;          // replaceable, C++14
void  operator delete[](void* ptr,
                        facebook::museum::MUSEUM_VERSION::std::align_val_t alignment) noexcept;           // replaceable, C++17
void  operator delete[](void* ptr, facebook::museum::MUSEUM_VERSION::std::size_t size,
                        facebook::museum::MUSEUM_VERSION::std::align_val_t alignment) noexcept;           // replaceable, C++17
void  operator delete[](void* ptr, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) noexcept;     // replaceable
void  operator delete[](void* ptr, facebook::museum::MUSEUM_VERSION::std::align_val_t alignment,
                        const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) noexcept;                // replaceable, C++17

void* operator new  (facebook::museum::MUSEUM_VERSION::std::size_t size, void* ptr) noexcept;
void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t size, void* ptr) noexcept;
void  operator delete  (void* ptr, void*) noexcept;
void  operator delete[](void* ptr, void*) noexcept;

*/

#include <museum/8.1.0/external/libcxx/__config>
#include <museum/8.1.0/external/libcxx/exception>
#include <museum/8.1.0/external/libcxx/cstddef>
#ifdef _MUSEUM_LIBCPP_NO_EXCEPTIONS
#include <museum/8.1.0/external/libcxx/cstdlib>
#endif

#if defined(_MUSEUM_LIBCPP_ABI_MICROSOFT)
#include <new.h>
#endif

#if !defined(_MUSEUM_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

#if !(defined(_MUSEUM_LIBCPP_BUILDING_NEW) || _MUSEUM_LIBCPP_STD_VER >= 14 || \
    (defined(__cpp_sized_deallocation) && __cpp_sized_deallocation >= 201309))
# define _MUSEUM_LIBCPP_HAS_NO_SIZED_DEALLOCATION
#endif

#if !defined(_MUSEUM_LIBCPP_HAS_NO_ALIGNED_ALLOCATION) && \
    (!(defined(_MUSEUM_LIBCPP_BUILDING_NEW) || _MUSEUM_LIBCPP_STD_VER > 14 || \
    (defined(__cpp_aligned_new) && __cpp_aligned_new >= 201606)))
# define _MUSEUM_LIBCPP_HAS_NO_ALIGNED_ALLOCATION
#endif

namespace facebook { namespace museum { namespace MUSEUM_VERSION { namespace std  // purposefully not using versioning namespace
{

#if !defined(_MUSEUM_LIBCPP_ABI_MICROSOFT)
struct _MUSEUM_LIBCPP_TYPE_VIS nothrow_t {};
extern _MUSEUM_LIBCPP_FUNC_VIS const nothrow_t nothrow;

class _MUSEUM_LIBCPP_EXCEPTION_ABI bad_alloc
    : public exception
{
public:
    bad_alloc() _NOEXCEPT;
    virtual ~bad_alloc() _NOEXCEPT;
    virtual const char* what() const _NOEXCEPT;
};

class _MUSEUM_LIBCPP_EXCEPTION_ABI bad_array_new_length
    : public bad_alloc
{
public:
    bad_array_new_length() _NOEXCEPT;
    virtual ~bad_array_new_length() _NOEXCEPT;
    virtual const char* what() const _NOEXCEPT;
};

typedef void (*new_handler)();
_MUSEUM_LIBCPP_FUNC_VIS new_handler set_new_handler(new_handler) _NOEXCEPT;
_MUSEUM_LIBCPP_FUNC_VIS new_handler get_new_handler() _NOEXCEPT;

#endif // !_MUSEUM_LIBCPP_ABI_MICROSOFT

_MUSEUM_LIBCPP_NORETURN _MUSEUM_LIBCPP_FUNC_VIS void __throw_bad_alloc();  // not in C++ spec

#if defined(_MUSEUM_LIBCPP_BUILDING_LIBRARY) || (_MUSEUM_LIBCPP_STD_VER > 11)

class _MUSEUM_LIBCPP_EXCEPTION_ABI bad_array_length
    : public bad_alloc
{
public:
    bad_array_length() _NOEXCEPT;
    virtual ~bad_array_length() _NOEXCEPT;
    virtual const char* what() const _NOEXCEPT;
};

#define _MUSEUM_LIBCPP_BAD_ARRAY_LENGTH_DEFINED

#endif  // defined(_MUSEUM_LIBCPP_BUILDING_NEW) || (_MUSEUM_LIBCPP_STD_VER > 11)

#if !defined(_MUSEUM_LIBCPP_HAS_NO_ALIGNED_ALLOCATION) || _MUSEUM_LIBCPP_STD_VER > 14
#ifndef _MUSEUM_LIBCPP_CXX03_LANG
enum class _MUSEUM_LIBCPP_ENUM_VIS align_val_t : size_t { };
#else
enum align_val_t { __zero = 0, __max = (size_t)-1 };
#endif
#endif

} } } }  // facebook::museum::MUSEUM_VERSION::std

#if defined(_MUSEUM_LIBCPP_CXX03_LANG)
#define _THROW_BAD_ALLOC throw(facebook::museum::MUSEUM_VERSION::std::bad_alloc)
#else
#define _THROW_BAD_ALLOC
#endif

#if !defined(_MUSEUM_LIBCPP_ABI_MICROSOFT)

_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new(facebook::museum::MUSEUM_VERSION::std::size_t __sz) _THROW_BAD_ALLOC;
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new(facebook::museum::MUSEUM_VERSION::std::size_t __sz, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) _NOEXCEPT _NOALIAS;
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p) _NOEXCEPT;
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) _NOEXCEPT;
#ifndef _MUSEUM_LIBCPP_HAS_NO_SIZED_DEALLOCATION
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, facebook::museum::MUSEUM_VERSION::std::size_t __sz) _NOEXCEPT;
#endif

_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t __sz) _THROW_BAD_ALLOC;
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t __sz, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) _NOEXCEPT _NOALIAS;
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p) _NOEXCEPT;
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) _NOEXCEPT;
#ifndef _MUSEUM_LIBCPP_HAS_NO_SIZED_DEALLOCATION
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, facebook::museum::MUSEUM_VERSION::std::size_t __sz) _NOEXCEPT;
#endif

#ifndef _MUSEUM_LIBCPP_HAS_NO_ALIGNED_ALLOCATION
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new(facebook::museum::MUSEUM_VERSION::std::size_t __sz, facebook::museum::MUSEUM_VERSION::std::align_val_t) _THROW_BAD_ALLOC;
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new(facebook::museum::MUSEUM_VERSION::std::size_t __sz, facebook::museum::MUSEUM_VERSION::std::align_val_t, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) _NOEXCEPT _NOALIAS;
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, facebook::museum::MUSEUM_VERSION::std::align_val_t) _NOEXCEPT;
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, facebook::museum::MUSEUM_VERSION::std::align_val_t, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) _NOEXCEPT;
#ifndef _MUSEUM_LIBCPP_HAS_NO_SIZED_DEALLOCATION
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete(void* __p, facebook::museum::MUSEUM_VERSION::std::size_t __sz, facebook::museum::MUSEUM_VERSION::std::align_val_t) _NOEXCEPT;
#endif

_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t __sz, facebook::museum::MUSEUM_VERSION::std::align_val_t) _THROW_BAD_ALLOC;
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t __sz, facebook::museum::MUSEUM_VERSION::std::align_val_t, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) _NOEXCEPT _NOALIAS;
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, facebook::museum::MUSEUM_VERSION::std::align_val_t) _NOEXCEPT;
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, facebook::museum::MUSEUM_VERSION::std::align_val_t, const facebook::museum::MUSEUM_VERSION::std::nothrow_t&) _NOEXCEPT;
#ifndef _MUSEUM_LIBCPP_HAS_NO_SIZED_DEALLOCATION
_MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS void  operator delete[](void* __p, facebook::museum::MUSEUM_VERSION::std::size_t __sz, facebook::museum::MUSEUM_VERSION::std::align_val_t) _NOEXCEPT;
#endif
#endif

inline _MUSEUM_LIBCPP_INLINE_VISIBILITY void* operator new  (facebook::museum::MUSEUM_VERSION::std::size_t, void* __p) _NOEXCEPT;
inline _MUSEUM_LIBCPP_INLINE_VISIBILITY void* operator new[](facebook::museum::MUSEUM_VERSION::std::size_t, void* __p) _NOEXCEPT;
inline _MUSEUM_LIBCPP_INLINE_VISIBILITY void  operator delete  (void*, void*) _NOEXCEPT;
inline _MUSEUM_LIBCPP_INLINE_VISIBILITY void  operator delete[](void*, void*) _NOEXCEPT;

#endif // !_MUSEUM_LIBCPP_ABI_MICROSOFT

_MUSEUM_LIBCPP_BEGIN_NAMESPACE_STD

inline _MUSEUM_LIBCPP_INLINE_VISIBILITY void *__allocate(size_t __size) {
#ifdef _MUSEUM_LIBCPP_HAS_NO_BUILTIN_OPERATOR_NEW_DELETE
  return ::operator new(__size);
#else
  return __builtin_operator_new(__size);
#endif
}

inline _MUSEUM_LIBCPP_INLINE_VISIBILITY void __libcpp_deallocate(void *__ptr) {
#ifdef _MUSEUM_LIBCPP_HAS_NO_BUILTIN_OPERATOR_NEW_DELETE
  ::operator delete(__ptr);
#else
  __builtin_operator_delete(__ptr);
#endif
}

#ifdef _MUSEUM_LIBCPP_BAD_ARRAY_LENGTH_DEFINED
_MUSEUM_LIBCPP_NORETURN inline _MUSEUM_LIBCPP_ALWAYS_INLINE
void __throw_bad_array_length()
{
#ifndef _MUSEUM_LIBCPP_NO_EXCEPTIONS
    throw bad_array_length();
#else
	_MUSEUM_VSTD::abort();
#endif
}
#endif

_MUSEUM_LIBCPP_END_NAMESPACE_STD

#endif  // _MUSEUM_LIBCPP_NEW
