// -*- C++ -*-
//===--------------------------- __config ---------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _MUSEUM_LIBCPP_CONFIG
#define _MUSEUM_LIBCPP_CONFIG

#if defined(_MSC_VER) && !defined(__clang__)
#if !defined(_MUSEUM_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#define _MUSEUM_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER
#endif
#endif

#ifndef _MUSEUM_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER
#pragma GCC system_header
#endif

#ifdef __cplusplus

#ifdef __GNUC__
#define _GNUC_VER (__GNUC__ * 100 + __GNUC_MINOR__)
#else
#define _GNUC_VER 0
#endif

#define _MUSEUM_LIBCPP_VERSION 5000

#ifndef _MUSEUM_LIBCPP_ABI_VERSION
#define _MUSEUM_LIBCPP_ABI_VERSION 1
#endif

#if defined(_MUSEUM_LIBCPP_ABI_UNSTABLE) || _MUSEUM_LIBCPP_ABI_VERSION >= 2
// Change short string representation so that string data starts at offset 0,
// improving its alignment in some cases.
#define _MUSEUM_LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
// Fix deque iterator type in order to support incomplete types.
#define _MUSEUM_LIBCPP_ABI_INCOMPLETE_TYPES_IN_DEQUE
// Fix undefined behavior in how facebook::museum::MUSEUM_VERSION::std::list stores it's linked nodes.
#define _MUSEUM_LIBCPP_ABI_LIST_REMOVE_NODE_POINTER_UB
// Fix undefined behavior in  how __tree stores its end and parent nodes.
#define _MUSEUM_LIBCPP_ABI_TREE_REMOVE_NODE_POINTER_UB
// Fix undefined behavior in how __hash_table stores it's pointer types
#define _MUSEUM_LIBCPP_ABI_FIX_UNORDERED_NODE_POINTER_UB
#define _MUSEUM_LIBCPP_ABI_FORWARD_LIST_REMOVE_NODE_POINTER_UB
#define _MUSEUM_LIBCPP_ABI_FIX_UNORDERED_CONTAINER_SIZE_TYPE
#define _MUSEUM_LIBCPP_ABI_VARIADIC_LOCK_GUARD
// Don't use a nullptr_t simulation type in C++03 instead using C++11 nullptr
// provided under the alternate keyword __nullptr, which changes the mangling
// of nullptr_t. This option is ABI incompatible with GCC in C++03 mode.
#define _MUSEUM_LIBCPP_ABI_ALWAYS_USE_CXX11_NULLPTR
// Define the `pointer_safety` enum as a C++11 strongly typed enumeration
// instead of as a class simulating an enum. If this option is enabled
// `pointer_safety` and `get_pointer_safety()` will no longer be available
// in C++03.
#define _MUSEUM_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE
#elif _MUSEUM_LIBCPP_ABI_VERSION == 1
#if !defined(_WIN32)
// Enable compiling copies of now inline methods into the dylib to support
// applications compiled against older libraries.
#define _MUSEUM_LIBCPP_DEPRECATED_ABI_LEGACY_LIBRARY_DEFINITIONS_FOR_INLINE_FUNCTIONS
#endif
// Feature macros for disabling pre ABI v1 features. All of these options
// are deprecated.
#if defined(__FreeBSD__)
#define _MUSEUM_LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR
#endif
#endif

#ifdef _MUSEUM_LIBCPP_TRIVIAL_PAIR_COPY_CTOR
#error "_MUSEUM_LIBCPP_TRIVIAL_PAIR_COPY_CTOR" is no longer supported. \
       use _MUSEUM_LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR instead
#endif

#define _MUSEUM_LIBCPP_CONCAT1(_MUSEUM_LIBCPP_X,_MUSEUM_LIBCPP_Y) _MUSEUM_LIBCPP_X##_MUSEUM_LIBCPP_Y
#define _MUSEUM_LIBCPP_CONCAT(_MUSEUM_LIBCPP_X,_MUSEUM_LIBCPP_Y) _MUSEUM_LIBCPP_CONCAT1(_MUSEUM_LIBCPP_X,_MUSEUM_LIBCPP_Y)

#define _MUSEUM_LIBCPP_NAMESPACE _MUSEUM_LIBCPP_CONCAT(__,_MUSEUM_LIBCPP_ABI_VERSION)

#if __cplusplus < 201103L
#define _MUSEUM_LIBCPP_CXX03_LANG
#endif

#ifndef __has_attribute
#define __has_attribute(__x) 0
#endif
#ifndef __has_builtin
#define __has_builtin(__x) 0
#endif
#ifndef __has_extension
#define __has_extension(__x) 0
#endif
#ifndef __has_feature
#define __has_feature(__x) 0
#endif
// '__is_identifier' returns '0' if '__x' is a reserved identifier provided by
// the compiler and '1' otherwise.
#ifndef __is_identifier
#define __is_identifier(__x) 1
#endif
#ifndef __has_declspec_attribute
#define __has_declspec_attribute(__x) 0
#endif

#define __has_keyword(__x) !(__is_identifier(__x))

#if defined(__clang__)
#define _MUSEUM_LIBCPP_COMPILER_CLANG
# ifndef __apple_build_version__
#   define _MUSEUM_LIBCPP_CLANG_VER (__clang_major__ * 100 + __clang_minor__)
# endif
#elif defined(__GNUC__)
#define _MUSEUM_LIBCPP_COMPILER_GCC
#elif defined(_MSC_VER)
#define _MUSEUM_LIBCPP_COMPILER_MSVC
#elif defined(__IBMCPP__)
#define _MUSEUM_LIBCPP_COMPILER_IBM
#endif

#ifndef _MUSEUM_LIBCPP_CLANG_VER
#define _MUSEUM_LIBCPP_CLANG_VER 0
#endif

// FIXME: ABI detection should be done via compiler builtin macros. This
// is just a placeholder until Clang implements such macros. For now assume
// that Windows compilers pretending to be MSVC++ target the microsoft ABI.
#if defined(_WIN32) && defined(_MSC_VER)
# define _MUSEUM_LIBCPP_ABI_MICROSOFT
#else
# define _MUSEUM_LIBCPP_ABI_ITANIUM
#endif

// Need to detect which libc we're using if we're on Linux.
#if defined(__linux__)
#include <museum/8.1.0/bionic/libc/features.h>
#if !defined(__GLIBC_PREREQ)
#define __GLIBC_PREREQ(a, b) 0
#endif // !defined(__GLIBC_PREREQ)
#endif // defined(__linux__)

#ifdef __LITTLE_ENDIAN__
#if __LITTLE_ENDIAN__
#define _MUSEUM_LIBCPP_LITTLE_ENDIAN 1
#define _MUSEUM_LIBCPP_BIG_ENDIAN    0
#endif  // __LITTLE_ENDIAN__
#endif  // __LITTLE_ENDIAN__

#ifdef __BIG_ENDIAN__
#if __BIG_ENDIAN__
#define _MUSEUM_LIBCPP_LITTLE_ENDIAN 0
#define _MUSEUM_LIBCPP_BIG_ENDIAN    1
#endif  // __BIG_ENDIAN__
#endif  // __BIG_ENDIAN__

#ifdef __BYTE_ORDER__
#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
#define _MUSEUM_LIBCPP_LITTLE_ENDIAN 1
#define _MUSEUM_LIBCPP_BIG_ENDIAN 0
#elif __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
#define _MUSEUM_LIBCPP_LITTLE_ENDIAN 0
#define _MUSEUM_LIBCPP_BIG_ENDIAN 1
#endif // __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
#endif // __BYTE_ORDER__

#ifdef __FreeBSD__
# include <museum/8.1.0/bionic/libc/sys/endian.h>
#  if _BYTE_ORDER == _LITTLE_ENDIAN
#   define _MUSEUM_LIBCPP_LITTLE_ENDIAN 1
#   define _MUSEUM_LIBCPP_BIG_ENDIAN    0
# else  // _BYTE_ORDER == _LITTLE_ENDIAN
#   define _MUSEUM_LIBCPP_LITTLE_ENDIAN 0
#   define _MUSEUM_LIBCPP_BIG_ENDIAN    1
# endif  // _BYTE_ORDER == _LITTLE_ENDIAN
# ifndef __LONG_LONG_SUPPORTED
#  define _MUSEUM_LIBCPP_HAS_NO_LONG_LONG
# endif  // __LONG_LONG_SUPPORTED
#endif  // __FreeBSD__

#ifdef __NetBSD__
# include <museum/8.1.0/bionic/libc/sys/endian.h>
#  if _BYTE_ORDER == _LITTLE_ENDIAN
#   define _MUSEUM_LIBCPP_LITTLE_ENDIAN 1
#   define _MUSEUM_LIBCPP_BIG_ENDIAN    0
# else  // _BYTE_ORDER == _LITTLE_ENDIAN
#   define _MUSEUM_LIBCPP_LITTLE_ENDIAN 0
#   define _MUSEUM_LIBCPP_BIG_ENDIAN    1
# endif  // _BYTE_ORDER == _LITTLE_ENDIAN
# define _MUSEUM_LIBCPP_HAS_QUICK_EXIT
#endif  // __NetBSD__

#if defined(_WIN32)
#  define _MUSEUM_LIBCPP_WIN32API      1
#  define _MUSEUM_LIBCPP_LITTLE_ENDIAN 1
#  define _MUSEUM_LIBCPP_BIG_ENDIAN    0
#  define _MUSEUM_LIBCPP_SHORT_WCHAR   1
// If mingw not explicitly detected, assume using MS C runtime only.
#  ifndef __MINGW32__
#    define _MUSEUM_LIBCPP_MSVCRT // Using Microsoft's C Runtime library
#  endif
#  if (defined(_M_AMD64) || defined(__x86_64__)) || (defined(_M_ARM) || defined(__arm__))
#    define _MUSEUM_LIBCPP_HAS_BITSCAN64
#  endif
# if defined(_MUSEUM_LIBCPP_MSVCRT)
#   define _MUSEUM_LIBCPP_HAS_QUICK_EXIT
# endif
#endif // defined(_WIN32)

#ifdef __sun__
# include <sys/isa_defs.h>
# ifdef _LITTLE_ENDIAN
#   define _MUSEUM_LIBCPP_LITTLE_ENDIAN 1
#   define _MUSEUM_LIBCPP_BIG_ENDIAN    0
# else
#   define _MUSEUM_LIBCPP_LITTLE_ENDIAN 0
#   define _MUSEUM_LIBCPP_BIG_ENDIAN    1
# endif
#endif // __sun__

#if defined(__CloudABI__)
  // Certain architectures provide arc4random(). Prefer using
  // arc4random() over /dev/{u,}random to make it possible to obtain
  // random data even when using sandboxing mechanisms such as chroots,
  // Capsicum, etc.
# define _MUSEUM_LIBCPP_USING_ARC4_RANDOM
#elif defined(__native_client__)
  // NaCl's sandbox (which PNaCl also runs in) doesn't allow filesystem access,
  // including accesses to the special files under /dev. C++11's
  // facebook::museum::MUSEUM_VERSION::std::random_device is instead exposed through a NaCl syscall.
# define _MUSEUM_LIBCPP_USING_NACL_RANDOM
#elif defined(_MUSEUM_LIBCPP_WIN32API)
# define _MUSEUM_LIBCPP_USING_WIN32_RANDOM
#else
# define _MUSEUM_LIBCPP_USING_DEV_RANDOM
#endif

#if !defined(_MUSEUM_LIBCPP_LITTLE_ENDIAN) || !defined(_MUSEUM_LIBCPP_BIG_ENDIAN)
# include <museum/8.1.0/bionic/libc/endian.h>
# if __BYTE_ORDER == __LITTLE_ENDIAN
#  define _MUSEUM_LIBCPP_LITTLE_ENDIAN 1
#  define _MUSEUM_LIBCPP_BIG_ENDIAN    0
# elif __BYTE_ORDER == __BIG_ENDIAN
#  define _MUSEUM_LIBCPP_LITTLE_ENDIAN 0
#  define _MUSEUM_LIBCPP_BIG_ENDIAN    1
# else  // __BYTE_ORDER == __BIG_ENDIAN
#  error unable to determine endian
# endif
#endif  // !defined(_MUSEUM_LIBCPP_LITTLE_ENDIAN) || !defined(_MUSEUM_LIBCPP_BIG_ENDIAN)

#if __has_attribute(__no_sanitize__)
#define _MUSEUM_LIBCPP_NO_CFI __attribute__((__no_sanitize__("cfi")))
#else
#define _MUSEUM_LIBCPP_NO_CFI
#endif

#if defined(_MUSEUM_LIBCPP_COMPILER_CLANG)

// _MUSEUM_LIBCPP_ALTERNATE_STRING_LAYOUT is an old name for
// _MUSEUM_LIBCPP_ABI_ALTERNATE_STRING_LAYOUT left here for backward compatibility.
#if (defined(__APPLE__) && !defined(__i386__) && !defined(__x86_64__) &&       \
     !defined(__arm__)) ||                                                     \
    defined(_MUSEUM_LIBCPP_ALTERNATE_STRING_LAYOUT)
#define _MUSEUM_LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
#endif

#if __has_feature(cxx_alignas)
#  define _ALIGNAS_TYPE(x) alignas(x)
#  define _ALIGNAS(x) alignas(x)
#else
#  define _ALIGNAS_TYPE(x) __attribute__((__aligned__(__alignof(x))))
#  define _ALIGNAS(x) __attribute__((__aligned__(x)))
#endif

#if __cplusplus < 201103L
typedef __char16_t char16_t;
typedef __char32_t char32_t;
#endif

#if !(__has_feature(cxx_exceptions)) && !defined(_MUSEUM_LIBCPP_NO_EXCEPTIONS)
#define _MUSEUM_LIBCPP_NO_EXCEPTIONS
#endif

#if !(__has_feature(cxx_rtti))
#define _MUSEUM_LIBCPP_NO_RTTI
#endif

#if !(__has_feature(cxx_strong_enums))
#define _MUSEUM_LIBCPP_HAS_NO_STRONG_ENUMS
#endif

#if !(__has_feature(cxx_decltype))
#define _MUSEUM_LIBCPP_HAS_NO_DECLTYPE
#endif

#if __has_feature(cxx_attributes)
#  define _MUSEUM_LIBCPP_NORETURN [[noreturn]]
#else
#  define _MUSEUM_LIBCPP_NORETURN __attribute__ ((noreturn))
#endif

#if !(__has_feature(cxx_lambdas))
#define _MUSEUM_LIBCPP_HAS_NO_LAMBDAS
#endif

#if !(__has_feature(cxx_nullptr))
# if (__has_extension(cxx_nullptr) || __has_keyword(__nullptr)) && defined(_MUSEUM_LIBCPP_ABI_ALWAYS_USE_CXX11_NULLPTR)
#   define nullptr __nullptr
# else
#   define _MUSEUM_LIBCPP_HAS_NO_NULLPTR
# endif
#endif

#if !(__has_feature(cxx_rvalue_references))
#define _MUSEUM_LIBCPP_HAS_NO_RVALUE_REFERENCES
#endif

#if !(__has_feature(cxx_auto_type))
#define _MUSEUM_LIBCPP_HAS_NO_AUTO_TYPE
#endif

#if !(__has_feature(cxx_variadic_templates))
#define _MUSEUM_LIBCPP_HAS_NO_VARIADICS
#endif

#if !(__has_feature(cxx_generalized_initializers))
#define _MUSEUM_LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
#endif

#if __has_feature(is_base_of)
#  define _MUSEUM_LIBCPP_HAS_IS_BASE_OF
#endif

#if __has_feature(is_final)
#  define _MUSEUM_LIBCPP_HAS_IS_FINAL
#endif

// Objective-C++ features (opt-in)
#if __has_feature(objc_arc)
#define _MUSEUM_LIBCPP_HAS_OBJC_ARC
#endif

#if __has_feature(objc_arc_weak)
#define _MUSEUM_LIBCPP_HAS_OBJC_ARC_WEAK
#define _MUSEUM_LIBCPP_HAS_NO_STRONG_ENUMS
#endif

#if !(__has_feature(cxx_constexpr))
#define _MUSEUM_LIBCPP_HAS_NO_CONSTEXPR
#endif

#if !(__has_feature(cxx_relaxed_constexpr))
#define _MUSEUM_LIBCPP_HAS_NO_CXX14_CONSTEXPR
#endif

#if !(__has_feature(cxx_variable_templates))
#define _MUSEUM_LIBCPP_HAS_NO_VARIABLE_TEMPLATES
#endif

#if __ISO_C_VISIBLE >= 2011 || __cplusplus >= 201103L
#if defined(__FreeBSD__)
#define _MUSEUM_LIBCPP_HAS_QUICK_EXIT
#define _MUSEUM_LIBCPP_HAS_C11_FEATURES
#elif defined(__Fuchsia__)
#define _MUSEUM_LIBCPP_HAS_QUICK_EXIT
#define _MUSEUM_LIBCPP_HAS_C11_FEATURES
#elif defined(__linux__)
#if !defined(_MUSEUM_LIBCPP_HAS_MUSL_LIBC)
#if __GLIBC_PREREQ(2, 15) || defined(__BIONIC__)
#define _MUSEUM_LIBCPP_HAS_QUICK_EXIT
#endif
#if __GLIBC_PREREQ(2, 17)
#define _MUSEUM_LIBCPP_HAS_C11_FEATURES
#endif
#else // defined(_MUSEUM_LIBCPP_HAS_MUSL_LIBC)
#define _MUSEUM_LIBCPP_HAS_QUICK_EXIT
#define _MUSEUM_LIBCPP_HAS_C11_FEATURES
#endif
#endif // __linux__
#endif

#if !(__has_feature(cxx_noexcept))
#define _MUSEUM_LIBCPP_HAS_NO_NOEXCEPT
#endif

#if __has_feature(underlying_type)
#  define _MUSEUM_LIBCPP_UNDERLYING_TYPE(T) __underlying_type(T)
#endif

#if __has_feature(is_literal)
#  define _MUSEUM_LIBCPP_IS_LITERAL(T) __is_literal(T)
#endif

// Inline namespaces are available in Clang regardless of C++ dialect.
#define _MUSEUM_LIBCPP_BEGIN_NAMESPACE_STD namespace facebook { namespace museum { namespace MUSEUM_VERSION { namespace std {inline namespace _MUSEUM_LIBCPP_NAMESPACE {
#define _MUSEUM_LIBCPP_END_NAMESPACE_STD  } } } } }
#define _MUSEUM_VSTD facebook::museum::MUSEUM_VERSION::std::_MUSEUM_LIBCPP_NAMESPACE

namespace facebook { namespace museum { namespace MUSEUM_VERSION { namespace std {
  inline namespace _MUSEUM_LIBCPP_NAMESPACE {
  }
} } } }

#if !defined(_MUSEUM_LIBCPP_HAS_NO_ASAN) && !__has_feature(address_sanitizer)
#define _MUSEUM_LIBCPP_HAS_NO_ASAN
#endif

// Allow for build-time disabling of unsigned integer sanitization
#if !defined(_MUSEUM_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK) && __has_attribute(no_sanitize)
#define _MUSEUM_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK __attribute__((__no_sanitize__("unsigned-integer-overflow")))
#endif

#elif defined(_MUSEUM_LIBCPP_COMPILER_GCC)

#define _ALIGNAS(x) __attribute__((__aligned__(x)))
#define _ALIGNAS_TYPE(x) __attribute__((__aligned__(__alignof(x))))

#define _MUSEUM_LIBCPP_NORETURN __attribute__((noreturn))

#if _GNUC_VER >= 407
#define _MUSEUM_LIBCPP_UNDERLYING_TYPE(T) __underlying_type(T)
#define _MUSEUM_LIBCPP_IS_LITERAL(T) __is_literal_type(T)
#define _MUSEUM_LIBCPP_HAS_IS_FINAL
#endif

#if defined(__GNUC__) && _GNUC_VER >= 403
#  define _MUSEUM_LIBCPP_HAS_IS_BASE_OF
#endif

#if !__EXCEPTIONS
#define _MUSEUM_LIBCPP_NO_EXCEPTIONS
#endif

// constexpr was added to GCC in 4.6.
#if _GNUC_VER < 406
#define _MUSEUM_LIBCPP_HAS_NO_CONSTEXPR
// Can only use constexpr in c++11 mode.
#elif !defined(__GXX_EXPERIMENTAL_CXX0X__) && __cplusplus < 201103L
#define _MUSEUM_LIBCPP_HAS_NO_CONSTEXPR
#endif

// Determine if GCC supports relaxed constexpr
#if !defined(__cpp_constexpr) || __cpp_constexpr < 201304L
#define _MUSEUM_LIBCPP_HAS_NO_CXX14_CONSTEXPR
#endif

// GCC 5 will support variable templates
#if !defined(__cpp_variable_templates) || __cpp_variable_templates < 201304L
#define _MUSEUM_LIBCPP_HAS_NO_VARIABLE_TEMPLATES
#endif

#ifndef __GXX_EXPERIMENTAL_CXX0X__
#define _MUSEUM_LIBCPP_HAS_NO_DECLTYPE
#define _MUSEUM_LIBCPP_HAS_NO_NULLPTR
#define _MUSEUM_LIBCPP_HAS_NO_UNICODE_CHARS
#define _MUSEUM_LIBCPP_HAS_NO_VARIADICS
#define _MUSEUM_LIBCPP_HAS_NO_RVALUE_REFERENCES
#define _MUSEUM_LIBCPP_HAS_NO_STRONG_ENUMS
#define _MUSEUM_LIBCPP_HAS_NO_NOEXCEPT

#else  // __GXX_EXPERIMENTAL_CXX0X__

#if _GNUC_VER < 403
#define _MUSEUM_LIBCPP_HAS_NO_RVALUE_REFERENCES
#endif


#if _GNUC_VER < 404
#define _MUSEUM_LIBCPP_HAS_NO_DECLTYPE
#define _MUSEUM_LIBCPP_HAS_NO_UNICODE_CHARS
#define _MUSEUM_LIBCPP_HAS_NO_VARIADICS
#define _MUSEUM_LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
#endif  // _GNUC_VER < 404

#if _GNUC_VER < 406
#define _MUSEUM_LIBCPP_HAS_NO_NOEXCEPT
#define _MUSEUM_LIBCPP_HAS_NO_NULLPTR
#endif

#endif  // __GXX_EXPERIMENTAL_CXX0X__

#define _MUSEUM_LIBCPP_BEGIN_NAMESPACE_STD namespace facebook { namespace museum { namespace MUSEUM_VERSION { namespace std { inline namespace _MUSEUM_LIBCPP_NAMESPACE {
#define _MUSEUM_LIBCPP_END_NAMESPACE_STD  } } } } }
#define _MUSEUM_VSTD facebook::museum::MUSEUM_VERSION::std::_MUSEUM_LIBCPP_NAMESPACE

namespace facebook { namespace museum { namespace MUSEUM_VERSION { namespace std {
  inline namespace _MUSEUM_LIBCPP_NAMESPACE {
  }
} } } }

#if !defined(_MUSEUM_LIBCPP_HAS_NO_ASAN) && !defined(__SANITIZE_ADDRESS__)
#define _MUSEUM_LIBCPP_HAS_NO_ASAN
#endif

#elif defined(_MUSEUM_LIBCPP_COMPILER_MSVC)

#define _MUSEUM_LIBCPP_TOSTRING2(x) #x
#define _MUSEUM_LIBCPP_TOSTRING(x) _MUSEUM_LIBCPP_TOSTRING2(x)
#define _MUSEUM_LIBCPP_WARNING(x) __pragma(message(__FILE__ "(" _MUSEUM_LIBCPP_TOSTRING(__LINE__) ") : warning note: " x))

#if _MSC_VER < 1900
#error "MSVC versions prior to Visual Studio 2015 are not supported"
#endif

#define _MUSEUM_LIBCPP_HAS_IS_BASE_OF
#define _MUSEUM_LIBCPP_HAS_NO_CONSTEXPR
#define _MUSEUM_LIBCPP_HAS_NO_CXX14_CONSTEXPR
#define _MUSEUM_LIBCPP_HAS_NO_VARIABLE_TEMPLATES
#if _MSC_VER <= 1800
#define _MUSEUM_LIBCPP_HAS_NO_UNICODE_CHARS
#endif
#define _MUSEUM_LIBCPP_HAS_NO_NOEXCEPT
#define __alignof__ __alignof
#define _MUSEUM_LIBCPP_NORETURN __declspec(noreturn)
#define _ALIGNAS(x) __declspec(align(x))
#define _MUSEUM_LIBCPP_HAS_NO_VARIADICS

#define _MUSEUM_LIBCPP_BEGIN_NAMESPACE_STD namespace facebook { namespace museum { namespace MUSEUM_VERSION { namespace std {
#define _MUSEUM_LIBCPP_END_NAMESPACE_STD  } } } }
#define _MUSEUM_VSTD std

#  define _MUSEUM_LIBCPP_WEAK
namespace facebook { namespace museum { namespace MUSEUM_VERSION { namespace std {
} } } }

#define _MUSEUM_LIBCPP_HAS_NO_ASAN

#elif defined(_MUSEUM_LIBCPP_COMPILER_IBM)

#define _ALIGNAS(x) __attribute__((__aligned__(x)))
#define _ALIGNAS_TYPE(x) __attribute__((__aligned__(__alignof(x))))
#define _ATTRIBUTE(x) __attribute__((x))
#define _MUSEUM_LIBCPP_NORETURN __attribute__((noreturn))

#define _MUSEUM_LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS
#define _MUSEUM_LIBCPP_HAS_NO_NOEXCEPT
#define _MUSEUM_LIBCPP_HAS_NO_NULLPTR
#define _MUSEUM_LIBCPP_HAS_NO_UNICODE_CHARS
#define _MUSEUM_LIBCPP_HAS_IS_BASE_OF
#define _MUSEUM_LIBCPP_HAS_IS_FINAL
#define _MUSEUM_LIBCPP_HAS_NO_VARIABLE_TEMPLATES

#if defined(_AIX)
#define __MULTILOCALE_API
#endif

#define _MUSEUM_LIBCPP_BEGIN_NAMESPACE_STD namespace facebook { namespace museum { namespace MUSEUM_VERSION { namespace std {inline namespace _MUSEUM_LIBCPP_NAMESPACE {
#define _MUSEUM_LIBCPP_END_NAMESPACE_STD  } } } } }
#define _MUSEUM_VSTD facebook::museum::MUSEUM_VERSION::std::_MUSEUM_LIBCPP_NAMESPACE

namespace facebook { namespace museum { namespace MUSEUM_VERSION { namespace std {
  inline namespace _MUSEUM_LIBCPP_NAMESPACE {
  }
} } } }

#define _MUSEUM_LIBCPP_HAS_NO_ASAN

#endif // _MUSEUM_LIBCPP_COMPILER_[CLANG|GCC|MSVC|IBM]

#if defined(__ELF__)
#define _MUSEUM_LIBCPP_OBJECT_FORMAT_ELF   1
#elif defined(__MACH__)
#define _MUSEUM_LIBCPP_OBJECT_FORMAT_MACHO 1
#else
#define _MUSEUM_LIBCPP_OBJECT_FORMAT_COFF  1
#endif

#if defined(_MUSEUM_LIBCPP_OBJECT_FORMAT_COFF)
#if defined(_MUSEUM_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS)
# define _MUSEUM_LIBCPP_DLL_VIS
# define _MUSEUM_LIBCPP_EXTERN_TEMPLATE_TYPE_VIS
# define _MUSEUM_LIBCPP_CLASS_TEMPLATE_INSTANTIATION_VIS
# define _MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS
#elif defined(_MUSEUM_LIBCPP_BUILDING_LIBRARY)
# define _MUSEUM_LIBCPP_DLL_VIS __declspec(dllexport)
# define _MUSEUM_LIBCPP_EXTERN_TEMPLATE_TYPE_VIS
# define _MUSEUM_LIBCPP_CLASS_TEMPLATE_INSTANTIATION_VIS _MUSEUM_LIBCPP_DLL_VIS
# define _MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS _MUSEUM_LIBCPP_DLL_VIS
#else
# define _MUSEUM_LIBCPP_DLL_VIS __declspec(dllimport)
# define _MUSEUM_LIBCPP_EXTERN_TEMPLATE_TYPE_VIS _MUSEUM_LIBCPP_DLL_VIS
# define _MUSEUM_LIBCPP_CLASS_TEMPLATE_INSTANTIATION_VIS
# define _MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS
#endif

#define _MUSEUM_LIBCPP_TYPE_VIS            _MUSEUM_LIBCPP_DLL_VIS
#define _MUSEUM_LIBCPP_FUNC_VIS            _MUSEUM_LIBCPP_DLL_VIS
#define _MUSEUM_LIBCPP_EXTERN_VIS          _MUSEUM_LIBCPP_DLL_VIS
#define _MUSEUM_LIBCPP_EXCEPTION_ABI       _MUSEUM_LIBCPP_DLL_VIS
#define _MUSEUM_LIBCPP_HIDDEN
#define _MUSEUM_LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
#define _MUSEUM_LIBCPP_TEMPLATE_VIS
#define _MUSEUM_LIBCPP_FUNC_VIS_ONLY
#define _MUSEUM_LIBCPP_ENUM_VIS

#if defined(_MUSEUM_LIBCPP_COMPILER_MSVC)
# define _MUSEUM_LIBCPP_INLINE_VISIBILITY __forceinline
# define _MUSEUM_LIBCPP_ALWAYS_INLINE     __forceinline
# define _MUSEUM_LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY __forceinline
#else
# define _MUSEUM_LIBCPP_INLINE_VISIBILITY __attribute__ ((__always_inline__))
# define _MUSEUM_LIBCPP_ALWAYS_INLINE     __attribute__ ((__always_inline__))
# define _MUSEUM_LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY __attribute__ ((__always_inline__))
#endif
#endif // defined(_MUSEUM_LIBCPP_OBJECT_FORMAT_COFF)

#ifndef _MUSEUM_LIBCPP_HIDDEN
#if !defined(_MUSEUM_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS)
#define _MUSEUM_LIBCPP_HIDDEN __attribute__ ((__visibility__("hidden")))
#else
#define _MUSEUM_LIBCPP_HIDDEN
#endif
#endif

#ifndef _MUSEUM_LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
#if !defined(_MUSEUM_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS)
// The inline should be removed once PR32114 is resolved
#define _MUSEUM_LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS inline _MUSEUM_LIBCPP_HIDDEN
#else
#define _MUSEUM_LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
#endif
#endif

#ifndef _MUSEUM_LIBCPP_FUNC_VIS
#if !defined(_MUSEUM_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS)
#define _MUSEUM_LIBCPP_FUNC_VIS __attribute__ ((__visibility__("default")))
#else
#define _MUSEUM_LIBCPP_FUNC_VIS
#endif
#endif

#ifndef _MUSEUM_LIBCPP_TYPE_VIS
#  if !defined(_MUSEUM_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS)
#    define _MUSEUM_LIBCPP_TYPE_VIS __attribute__ ((__visibility__("default")))
#  else
#    define _MUSEUM_LIBCPP_TYPE_VIS
#  endif
#endif

#ifndef _MUSEUM_LIBCPP_TEMPLATE_VIS
#  if !defined(_MUSEUM_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS)
#    if __has_attribute(__type_visibility__)
#      define _MUSEUM_LIBCPP_TEMPLATE_VIS __attribute__ ((__type_visibility__("default")))
#    else
#      define _MUSEUM_LIBCPP_TEMPLATE_VIS __attribute__ ((__visibility__("default")))
#    endif
#  else
#    define _MUSEUM_LIBCPP_TEMPLATE_VIS
#  endif
#endif

#ifndef _MUSEUM_LIBCPP_FUNC_VIS_ONLY
# define _MUSEUM_LIBCPP_FUNC_VIS_ONLY _MUSEUM_LIBCPP_FUNC_VIS
#endif

#ifndef _MUSEUM_LIBCPP_EXTERN_VIS
# define _MUSEUM_LIBCPP_EXTERN_VIS
#endif

#ifndef _MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS
# define _MUSEUM_LIBCPP_OVERRIDABLE_FUNC_VIS _MUSEUM_LIBCPP_FUNC_VIS
#endif

#ifndef _MUSEUM_LIBCPP_EXCEPTION_ABI
#if !defined(_MUSEUM_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS)
#define _MUSEUM_LIBCPP_EXCEPTION_ABI __attribute__ ((__visibility__("default")))
#else
#define _MUSEUM_LIBCPP_EXCEPTION_ABI
#endif
#endif

#ifndef _MUSEUM_LIBCPP_ENUM_VIS
#  if !defined(_MUSEUM_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS) && __has_attribute(__type_visibility__)
#    define _MUSEUM_LIBCPP_ENUM_VIS __attribute__ ((__type_visibility__("default")))
#  else
#    define _MUSEUM_LIBCPP_ENUM_VIS
#  endif
#endif

#ifndef _MUSEUM_LIBCPP_EXTERN_TEMPLATE_TYPE_VIS
#  if !defined(_MUSEUM_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS) && __has_attribute(__type_visibility__)
#    define _MUSEUM_LIBCPP_EXTERN_TEMPLATE_TYPE_VIS __attribute__ ((__visibility__("default")))
#  else
#    define _MUSEUM_LIBCPP_EXTERN_TEMPLATE_TYPE_VIS
#  endif
#endif

#ifndef _MUSEUM_LIBCPP_CLASS_TEMPLATE_INSTANTIATION_VIS
#  define _MUSEUM_LIBCPP_CLASS_TEMPLATE_INSTANTIATION_VIS
#endif

#ifndef _MUSEUM_LIBCPP_INLINE_VISIBILITY
#if !defined(_MUSEUM_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS)
#define _MUSEUM_LIBCPP_INLINE_VISIBILITY __attribute__ ((__visibility__("hidden")))
#else
#define _MUSEUM_LIBCPP_INLINE_VISIBILITY __attribute__ ((__always_inline__))
#endif
#endif

#ifndef _MUSEUM_LIBCPP_ALWAYS_INLINE
#if !defined(_MUSEUM_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS)
#define _MUSEUM_LIBCPP_ALWAYS_INLINE  __attribute__ ((__visibility__("hidden"), __always_inline__))
#else
#define _MUSEUM_LIBCPP_ALWAYS_INLINE  __attribute__ ((__always_inline__))
#endif
#endif

#ifndef _MUSEUM_LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY
# if !defined(_MUSEUM_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS)
#  define _MUSEUM_LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY __attribute__((__visibility__("default"), __always_inline__))
# else
#  define _MUSEUM_LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY __attribute__((__always_inline__))
# endif
#endif

#ifndef _MUSEUM_LIBCPP_PREFERRED_OVERLOAD
#  if __has_attribute(__enable_if__)
#    define _MUSEUM_LIBCPP_PREFERRED_OVERLOAD __attribute__ ((__enable_if__(true, "")))
#  endif
#endif

#ifndef _MUSEUM_LIBCPP_HAS_NO_NOEXCEPT
#  define _NOEXCEPT noexcept
#  define _NOEXCEPT_(x) noexcept(x)
#else
#  define _NOEXCEPT throw()
#  define _NOEXCEPT_(x)
#endif

#if defined(_MUSEUM_LIBCPP_DEBUG_USE_EXCEPTIONS)
# if !defined(_MUSEUM_LIBCPP_DEBUG)
#   error cannot use _MUSEUM_LIBCPP_DEBUG_USE_EXCEPTIONS unless _MUSEUM_LIBCPP_DEBUG is defined
# endif
# define _NOEXCEPT_DEBUG noexcept(false)
# define _NOEXCEPT_DEBUG_(x) noexcept(false)
#else
# define _NOEXCEPT_DEBUG _NOEXCEPT
# define _NOEXCEPT_DEBUG_(x) _NOEXCEPT_(x)
#endif

#ifdef _MUSEUM_LIBCPP_HAS_NO_UNICODE_CHARS
typedef unsigned short char16_t;
typedef unsigned int   char32_t;
#endif  // _MUSEUM_LIBCPP_HAS_NO_UNICODE_CHARS

#ifndef __SIZEOF_INT128__
#define _MUSEUM_LIBCPP_HAS_NO_INT128
#endif

#ifdef _MUSEUM_LIBCPP_CXX03_LANG
# if __has_extension(c_static_assert)
#   define static_assert(__b, __m) _Static_assert(__b, __m)
# else
extern "C++" {
template <bool> struct __static_assert_test;
template <> struct __static_assert_test<true> {};
template <unsigned> struct __static_assert_check {};
}
#define static_assert(__b, __m) \
    typedef __static_assert_check<sizeof(__static_assert_test<(__b)>)> \
    _MUSEUM_LIBCPP_CONCAT(__t, __LINE__)
# endif // __has_extension(c_static_assert)
#endif  // _MUSEUM_LIBCPP_CXX03_LANG

#ifdef _MUSEUM_LIBCPP_HAS_NO_DECLTYPE
// GCC 4.6 provides __decltype in all standard modes.
#if __has_keyword(__decltype) || _MUSEUM_LIBCPP_CLANG_VER >= 304 || _GNUC_VER >= 406
#  define decltype(__x) __decltype(__x)
#else
#  define decltype(__x) __typeof__(__x)
#endif
#endif

#ifdef _MUSEUM_LIBCPP_HAS_NO_CONSTEXPR
#define _MUSEUM_LIBCPP_CONSTEXPR
#else
#define _MUSEUM_LIBCPP_CONSTEXPR constexpr
#endif

#ifdef _MUSEUM_LIBCPP_CXX03_LANG
#define _MUSEUM_LIBCPP_DEFAULT {}
#else
#define _MUSEUM_LIBCPP_DEFAULT = default;
#endif

#ifdef _MUSEUM_LIBCPP_CXX03_LANG
#define _MUSEUM_LIBCPP_EQUAL_DELETE
#else
#define _MUSEUM_LIBCPP_EQUAL_DELETE = delete
#endif

#ifdef __GNUC__
#define _NOALIAS __attribute__((__malloc__))
#else
#define _NOALIAS
#endif

#if __has_feature(cxx_explicit_conversions) || defined(__IBMCPP__) || \
    (!defined(_MUSEUM_LIBCPP_CXX03_LANG) && defined(__GNUC__)) // All supported GCC versions
#   define _MUSEUM_LIBCPP_EXPLICIT explicit
#else
#   define _MUSEUM_LIBCPP_EXPLICIT
#endif

#if !__has_builtin(__builtin_operator_new) || !__has_builtin(__builtin_operator_delete)
#   define _MUSEUM_LIBCPP_HAS_NO_BUILTIN_OPERATOR_NEW_DELETE
#endif

#ifdef _MUSEUM_LIBCPP_HAS_NO_STRONG_ENUMS
#define _MUSEUM_LIBCPP_DECLARE_STRONG_ENUM(x) struct _MUSEUM_LIBCPP_TYPE_VIS x { enum __lx
#define _MUSEUM_LIBCPP_DECLARE_STRONG_ENUM_EPILOG(x) \
    __lx __v_; \
    _MUSEUM_LIBCPP_ALWAYS_INLINE x(__lx __v) : __v_(__v) {} \
    _MUSEUM_LIBCPP_ALWAYS_INLINE explicit x(int __v) : __v_(static_cast<__lx>(__v)) {} \
    _MUSEUM_LIBCPP_ALWAYS_INLINE operator int() const {return __v_;} \
    };
#else  // _MUSEUM_LIBCPP_HAS_NO_STRONG_ENUMS
#define _MUSEUM_LIBCPP_DECLARE_STRONG_ENUM(x) enum class _MUSEUM_LIBCPP_ENUM_VIS x
#define _MUSEUM_LIBCPP_DECLARE_STRONG_ENUM_EPILOG(x)
#endif  // _MUSEUM_LIBCPP_HAS_NO_STRONG_ENUMS

#ifdef _MUSEUM_LIBCPP_DEBUG
#   if _MUSEUM_LIBCPP_DEBUG == 0
#       define _MUSEUM_LIBCPP_DEBUG_LEVEL 1
#   elif _MUSEUM_LIBCPP_DEBUG == 1
#       define _MUSEUM_LIBCPP_DEBUG_LEVEL 2
#   else
#       error Supported values for _MUSEUM_LIBCPP_DEBUG are 0 and 1
#   endif
# if !defined(_MUSEUM_LIBCPP_BUILDING_LIBRARY)
#   define _MUSEUM_LIBCPP_EXTERN_TEMPLATE(...)
# endif
#endif

#ifndef _MUSEUM_LIBCPP_EXTERN_TEMPLATE
#define _MUSEUM_LIBCPP_EXTERN_TEMPLATE(...)
#endif

#ifndef _MUSEUM_LIBCPP_EXTERN_TEMPLATE2
#define _MUSEUM_LIBCPP_EXTERN_TEMPLATE2(...) extern template __VA_ARGS__;
#endif

#if defined(__APPLE__) && defined(__LP64__) && !defined(__x86_64__)
#define _MUSEUM_LIBCPP_NONUNIQUE_RTTI_BIT (1ULL << 63)
#endif

#if defined(__APPLE__) || defined(__FreeBSD__) || defined(_MUSEUM_LIBCPP_MSVCRT) ||   \
    defined(__sun__) || defined(__NetBSD__) || defined(__CloudABI__)
#define _MUSEUM_LIBCPP_LOCALE__L_EXTENSIONS 1
#endif

#if defined(__unix__) || (defined(__APPLE__) && defined(__MACH__))
// Most unix variants have catopen.  These are the specific ones that don't.
#if !defined(__BIONIC__) && !defined(_NEWLIB_VERSION)
#define _MUSEUM_LIBCPP_HAS_CATOPEN 1
#endif
#endif

#ifdef __FreeBSD__
#define _DECLARE_C99_LDBL_MATH 1
#endif

#if defined(__APPLE__)
# if !defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && \
     defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__)
#   define __MAC_OS_X_VERSION_MIN_REQUIRED __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
# endif
# if defined(__MAC_OS_X_VERSION_MIN_REQUIRED)
#   if __MAC_OS_X_VERSION_MIN_REQUIRED < 1060
#     define _MUSEUM_LIBCPP_HAS_NO_ALIGNED_ALLOCATION
#   endif
# endif
#endif // defined(__APPLE__)

#if defined(__APPLE__) || defined(__FreeBSD__)
#define _MUSEUM_LIBCPP_HAS_DEFAULTRUNELOCALE
#endif

#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__sun__)
#define _MUSEUM_LIBCPP_WCTYPE_IS_MASK
#endif

#ifndef _MUSEUM_LIBCPP_STD_VER
#  if  __cplusplus <= 201103L
#    define _MUSEUM_LIBCPP_STD_VER 11
#  elif __cplusplus <= 201402L
#    define _MUSEUM_LIBCPP_STD_VER 14
#  else
#    define _MUSEUM_LIBCPP_STD_VER 16  // current year, or date of c++17 ratification
#  endif
#endif  // _MUSEUM_LIBCPP_STD_VER

#if _MUSEUM_LIBCPP_STD_VER > 11
#define _MUSEUM_LIBCPP_DEPRECATED [[deprecated]]
#else
#define _MUSEUM_LIBCPP_DEPRECATED
#endif

#if _MUSEUM_LIBCPP_STD_VER <= 11
#define _MUSEUM_LIBCPP_EXPLICIT_AFTER_CXX11
#define _MUSEUM_LIBCPP_DEPRECATED_AFTER_CXX11
#else
#define _MUSEUM_LIBCPP_EXPLICIT_AFTER_CXX11 explicit
#define _MUSEUM_LIBCPP_DEPRECATED_AFTER_CXX11 [[deprecated]]
#endif

#if _MUSEUM_LIBCPP_STD_VER > 11 && !defined(_MUSEUM_LIBCPP_HAS_NO_CXX14_CONSTEXPR)
#define _MUSEUM_LIBCPP_CONSTEXPR_AFTER_CXX11 constexpr
#else
#define _MUSEUM_LIBCPP_CONSTEXPR_AFTER_CXX11
#endif

#if _MUSEUM_LIBCPP_STD_VER > 14 && !defined(_MUSEUM_LIBCPP_HAS_NO_CXX14_CONSTEXPR)
#define _MUSEUM_LIBCPP_CONSTEXPR_AFTER_CXX14 constexpr
#else
#define _MUSEUM_LIBCPP_CONSTEXPR_AFTER_CXX14
#endif

// FIXME: Remove all usages of this macro once compilers catch up.
#if !defined(__cpp_inline_variables) || (__cpp_inline_variables < 201606L)
# define _MUSEUM_LIBCPP_HAS_NO_INLINE_VARIABLES
#endif

#ifdef _MUSEUM_LIBCPP_HAS_NO_RVALUE_REFERENCES
#  define _MUSEUM_LIBCPP_EXPLICIT_MOVE(x) _MUSEUM_VSTD::move(x)
#else
#  define _MUSEUM_LIBCPP_EXPLICIT_MOVE(x) (x)
#endif

#ifndef _MUSEUM_LIBCPP_HAS_NO_ASAN
_MUSEUM_LIBCPP_FUNC_VIS extern "C" void __sanitizer_annotate_contiguous_container(
  const void *, const void *, const void *, const void *);
#endif

// Try to find out if RTTI is disabled.
// g++ and cl.exe have RTTI on by default and define a macro when it is.
// g++ only defines the macro in 4.3.2 and onwards.
#if !defined(_MUSEUM_LIBCPP_NO_RTTI)
#  if defined(__GNUC__) && ((__GNUC__ >= 5) || (__GNUC__ == 4 && \
   (__GNUC_MINOR__ >= 3 || __GNUC_PATCHLEVEL__ >= 2))) && !defined(__GXX_RTTI)
#    define _MUSEUM_LIBCPP_NO_RTTI
#  elif defined(_MUSEUM_LIBCPP_MSVC) && !defined(_CPPRTTI)
#    define _MUSEUM_LIBCPP_NO_RTTI
#  endif
#endif

#ifndef _MUSEUM_LIBCPP_WEAK
#  define _MUSEUM_LIBCPP_WEAK __attribute__((__weak__))
#endif

// Thread API
#if !defined(_MUSEUM_LIBCPP_HAS_NO_THREADS) && \
    !defined(_MUSEUM_LIBCPP_HAS_THREAD_API_PTHREAD) && \
    !defined(_MUSEUM_LIBCPP_HAS_THREAD_API_EXTERNAL)
# if defined(__FreeBSD__) || \
    defined(__Fuchsia__) || \
    defined(__NetBSD__) || \
    defined(__linux__) || \
    defined(__APPLE__) || \
    defined(__CloudABI__) || \
    defined(__sun__)
#   define _MUSEUM_LIBCPP_HAS_THREAD_API_PTHREAD
# elif defined(_MUSEUM_LIBCPP_WIN32API)
#  define _MUSEUM_LIBCPP_HAS_THREAD_API_WIN32
# else
#  error "No thread API"
# endif // _MUSEUM_LIBCPP_HAS_THREAD_API
#endif // _MUSEUM_LIBCPP_HAS_NO_THREADS

#if defined(_MUSEUM_LIBCPP_HAS_NO_THREADS) && defined(_MUSEUM_LIBCPP_HAS_THREAD_API_PTHREAD)
#  error _MUSEUM_LIBCPP_HAS_THREAD_API_PTHREAD may only be defined when \
         _MUSEUM_LIBCPP_HAS_NO_THREADS is not defined.
#endif

#if defined(_MUSEUM_LIBCPP_HAS_NO_THREADS) && defined(_MUSEUM_LIBCPP_HAS_THREAD_API_EXTERNAL)
#  error _MUSEUM_LIBCPP_HAS_THREAD_API_EXTERNAL may not be defined when \
         _MUSEUM_LIBCPP_HAS_NO_THREADS is defined.
#endif

#if defined(_MUSEUM_LIBCPP_HAS_NO_MONOTONIC_CLOCK) && !defined(_MUSEUM_LIBCPP_HAS_NO_THREADS)
#  error _MUSEUM_LIBCPP_HAS_NO_MONOTONIC_CLOCK may only be defined when \
         _MUSEUM_LIBCPP_HAS_NO_THREADS is defined.
#endif

// Systems that use capability-based security (FreeBSD with Capsicum,
// Nuxi CloudABI) may only provide local filesystem access (using *at()).
// Functions like open(), rename(), unlink() and stat() should not be
// used, as they attempt to access the global filesystem namespace.
#ifdef __CloudABI__
#define _MUSEUM_LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE
#endif

// CloudABI is intended for running networked services. Processes do not
// have standard input and output channels.
#ifdef __CloudABI__
#define _MUSEUM_LIBCPP_HAS_NO_STDIN
#define _MUSEUM_LIBCPP_HAS_NO_STDOUT
#endif

#if defined(__BIONIC__) || defined(__CloudABI__) ||                            \
    defined(_MUSEUM_LIBCPP_HAS_MUSL_LIBC)
#define _MUSEUM_LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE
#endif

// Thread-unsafe functions such as strtok() and localtime()
// are not available.
#ifdef __CloudABI__
#define _MUSEUM_LIBCPP_HAS_NO_THREAD_UNSAFE_C_FUNCTIONS
#endif

#if __has_feature(cxx_atomic) || __has_extension(c_atomic) || __has_keyword(_Atomic)
#define _MUSEUM_LIBCPP_HAS_C_ATOMIC_IMP
#elif _GNUC_VER > 407
#define _MUSEUM_LIBCPP_HAS_GCC_ATOMIC_IMP
#endif

#if (!defined(_MUSEUM_LIBCPP_HAS_C_ATOMIC_IMP) && !defined(_MUSEUM_LIBCPP_HAS_GCC_ATOMIC_IMP)) \
     || defined(_MUSEUM_LIBCPP_HAS_NO_THREADS)
#define _MUSEUM_LIBCPP_HAS_NO_ATOMIC_HEADER
#endif

#ifndef _MUSEUM_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
#define _MUSEUM_LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK
#endif

#if defined(_MUSEUM_LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS)
#if defined(__clang__) && __has_attribute(acquire_capability)
// Work around the attribute handling in clang.  When both __declspec and
// __attribute__ are present, the processing goes awry preventing the definition
// of the types.
#if !defined(_MUSEUM_LIBCPP_OBJECT_FORMAT_COFF)
#define _MUSEUM_LIBCPP_HAS_THREAD_SAFETY_ANNOTATIONS
#endif
#endif
#endif

#if __has_attribute(require_constant_initialization)
#define _MUSEUM_LIBCPP_SAFE_STATIC __attribute__((__require_constant_initialization__))
#else
#define _MUSEUM_LIBCPP_SAFE_STATIC
#endif

#if !__has_builtin(__builtin_addressof) && _GNUC_VER < 700
#define _MUSEUM_LIBCPP_HAS_NO_BUILTIN_ADDRESSOF
#endif

#if !defined(_MUSEUM_LIBCPP_HAS_NO_OFF_T_FUNCTIONS)
#if defined(_MUSEUM_LIBCPP_MSVCRT) || defined(_NEWLIB_VERSION)
#define _MUSEUM_LIBCPP_HAS_NO_OFF_T_FUNCTIONS
#endif
#endif

#if __has_attribute(diagnose_if) && !defined(_MUSEUM_LIBCPP_DISABLE_ADDITIONAL_DIAGNOSTICS)
# define _MUSEUM_LIBCPP_DIAGNOSE_WARNING(...) \
    __attribute__((diagnose_if(__VA_ARGS__, "warning")))
# define _MUSEUM_LIBCPP_DIAGNOSE_ERROR(...) \
    __attribute__((diagnose_if(__VA_ARGS__, "error")))
#else
# define _MUSEUM_LIBCPP_DIAGNOSE_WARNING(...)
# define _MUSEUM_LIBCPP_DIAGNOSE_ERROR(...)
#endif

#if defined(_MUSEUM_LIBCPP_ABI_MICROSOFT) && \
   (defined(_MUSEUM_LIBCPP_COMPILER_MSVC) || __has_declspec_attribute(empty_bases))
# define _MUSEUM_LIBCPP_DECLSPEC_EMPTY_BASES __declspec(empty_bases)
#else
# define _MUSEUM_LIBCPP_DECLSPEC_EMPTY_BASES
#endif

#if defined(_MUSEUM_LIBCPP_ENABLE_CXX17_REMOVED_FEATURES)
# define _MUSEUM_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR
# define _MUSEUM_LIBCPP_ENABLE_CXX17_REMOVED_UNEXPECTED_FUNCTIONS
#endif // _MUSEUM_LIBCPP_ENABLE_CXX17_REMOVED_FEATURES

#endif // __cplusplus

#endif // _MUSEUM_LIBCPP_CONFIG
