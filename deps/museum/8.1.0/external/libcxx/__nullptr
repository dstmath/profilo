// -*- C++ -*-
//===--------------------------- __nullptr --------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _MUSEUM_LIBCPP_NULLPTR
#define _MUSEUM_LIBCPP_NULLPTR

#include <museum/8.1.0/external/libcxx/__config>

#if !defined(_MUSEUM_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

#ifdef _MUSEUM_LIBCPP_HAS_NO_NULLPTR

_MUSEUM_LIBCPP_BEGIN_NAMESPACE_STD

struct _MUSEUM_LIBCPP_TEMPLATE_VIS nullptr_t
{
    void* __lx;

    struct __nat {int __for_bool_;};

    _MUSEUM_LIBCPP_ALWAYS_INLINE _MUSEUM_LIBCPP_CONSTEXPR nullptr_t() : __lx(0) {}
    _MUSEUM_LIBCPP_ALWAYS_INLINE _MUSEUM_LIBCPP_CONSTEXPR nullptr_t(int __nat::*) : __lx(0) {}

    _MUSEUM_LIBCPP_ALWAYS_INLINE _MUSEUM_LIBCPP_CONSTEXPR operator int __nat::*() const {return 0;}

    template <class _Tp>
        _MUSEUM_LIBCPP_ALWAYS_INLINE _MUSEUM_LIBCPP_CONSTEXPR
        operator _Tp* () const {return 0;}

    template <class _Tp, class _Up>
        _MUSEUM_LIBCPP_ALWAYS_INLINE
        operator _Tp _Up::* () const {return 0;}

    friend _MUSEUM_LIBCPP_ALWAYS_INLINE _MUSEUM_LIBCPP_CONSTEXPR bool operator==(nullptr_t, nullptr_t) {return true;}
    friend _MUSEUM_LIBCPP_ALWAYS_INLINE _MUSEUM_LIBCPP_CONSTEXPR bool operator!=(nullptr_t, nullptr_t) {return false;}
};

inline _MUSEUM_LIBCPP_ALWAYS_INLINE _MUSEUM_LIBCPP_CONSTEXPR nullptr_t __get_nullptr_t() {return nullptr_t(0);}

#define nullptr _MUSEUM_VSTD::__get_nullptr_t()

_MUSEUM_LIBCPP_END_NAMESPACE_STD

#else  // _MUSEUM_LIBCPP_HAS_NO_NULLPTR

namespace facebook { namespace museum { namespace MUSEUM_VERSION { namespace std
{
    typedef decltype(nullptr) nullptr_t;
} } } }

#endif  // _MUSEUM_LIBCPP_HAS_NO_NULLPTR

#endif  // _MUSEUM_LIBCPP_NULLPTR
