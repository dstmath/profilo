// -*- C++ -*-
//===--------------------------- list ------------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#ifndef _MUSEUM_LIBCPP_EXPERIMENTAL_SET
#define _MUSEUM_LIBCPP_EXPERIMENTAL_SET
/*
    experimental/set synopsis

// C++1z
namespace std {
namespace experimental {
inline namespace fundamentals_v1 {
namespace pmr {

  template <class Key, class T, class Compare = less<Key>>
  using set = facebook::museum::MUSEUM_VERSION::std::set<Key, T, Compare,
                       polymorphic_allocator<pair<const Key,T>>>;

  template <class Key, class T, class Compare = less<Key>>
  using multiset = facebook::museum::MUSEUM_VERSION::std::multiset<Key, T, Compare,
                                 polymorphic_allocator<pair<const Key,T>>>;

} // namespace pmr
} // namespace fundamentals_v1
} // namespace experimental
} // namespace std

 */

#include <museum/8.1.0/external/libcxx/experimental/__config>
#include <museum/8.1.0/external/libcxx/experimental/set>
#include <museum/8.1.0/external/libcxx/experimental/memory_resource>

#if !defined(_MUSEUM_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

_MUSEUM_LIBCPP_BEGIN_NAMESPACE_LFTS_PMR

template <class _Value, class  _Compare = less<_Value>>
using set = _MUSEUM_VSTD::set<_Value, _Compare,
                        polymorphic_allocator<_Value>>;

template <class _Value, class  _Compare = less<_Value>>
using multiset = _MUSEUM_VSTD::multiset<_Value, _Compare,
                        polymorphic_allocator<_Value>>;

_MUSEUM_LIBCPP_END_NAMESPACE_LFTS_PMR

#endif /* _MUSEUM_LIBCPP_EXPERIMENTAL_SET */
